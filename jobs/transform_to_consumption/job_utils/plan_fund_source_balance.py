
from pyspark.sql import SparkSession
from pyspark.sql.functions import *


def transform(spark: SparkSession, batch_date: str, primary_key: list):

    consumption_df = spark.sql("select t1.client_id, t1.plan_number, coalesce(nullif(t1.fund_number, ''), '-9999') as fund_number, t1.money_source, c2.fund_iv as fund_iv, t1.source_cycle_date, cast(t1.core_cash_value_amount as Decimal(17, 2)) as cash_value_amount, cast(t1.total_units as DECIMAL(17, 4)) as total_units, cast(t1.vested_balance as DECIMAL(17, 4)) as vested_balance, case when t1.fund_number = '-9999' then cast(null as decimal(17, 6)) else cast(t1.unit_price [0] AS DECIMAL(17, 6)) end AS unit_price, cast(t1.ytd_contributions as DEcimal(17, 2)) as ytd_contributions, cast(null as varchar(36)) as plan_source_key from ( select coalesce(client_id, '-9999') as client_id, coalesce(nullif(plan_number, ''), '-9999') as plan_number, coalesce(fund_number, '-9999') as fund_number, coalesce(nullif(money_source, ''), '-9999') as money_source, coalesce(source_cycle_date, current_date() -1) as source_cycle_date, sum(coalesce(cash_value_amount, 0)) as core_cash_value_amount, sum(coalesce(total_shares, 0.00)) as total_units, collect_set(share_price) as unit_price, sum(coalesce(vested_balance, 0)) as vested_balance, sum(coalesce(ytd_contributions, 0)) as ytd_contributions from ( select trim(pcb.client_id) as client_id, trim(pcb.plan_number) as plan_number, pcb.source_cycle_date, trim(pcb.money_source) as money_source, pcb.cash_value_amount, pcb.vested_balance, pcb.ytd_contributions, pcb.share_price as share_price, pcb.total_shares, trim(pcb.fund_number) as fund_number from participant_core_balance pcb ) group by client_id, plan_number, fund_number, money_source, source_cycle_date ) t1 left outer join ( select plan_number, fund_number, client_id, money_source, fund_iv, count(1) from participant_core_balance c2 group by plan_number, fund_number, client_id, money_source, fund_iv ) c2 on t1.plan_number = c2.plan_number and coalesce(nullif(t1.fund_number, ''), '-9999') = coalesce(nullif(c2.fund_number, ''), '-9999') and t1.client_id = c2.client_id and t1.money_source = c2.money_source")

    return consumption_df
