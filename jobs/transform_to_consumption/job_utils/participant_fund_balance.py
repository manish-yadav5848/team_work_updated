from pyspark.sql import SparkSession
from pyspark.sql.functions import *


def transform(spark: SparkSession, batch_date: str, primary_key: list):

    consumption_df = spark.sql("SELECT coalesce(nullif(A.plan_number, ''), '-9999') as plan_number, A.participant_id, coalesce(nullif(a.fund_number, ''), '-9999') as fund_number, A.fund_iv, A.retirement_account_id, A.source_cycle_date, A.cash_value_amount, A.ee_cash_value_amount, A.ytd_contributions, A.er_cash_value_amount, A.total_units, A.share_price from ( select F.participant_id, case when ( F.fund_iv <> '-9999' or F.fund_iv <> '' ) and ( F.fund_number = '-9999' or F.fund_number = '' ) then coalesce(pf.fund_number, '-9999') else coalesce(F.fund_number, '-9999') end as fund_number, F.fund_iv, F.plan_number, F.source_cycle_date, F.cash_value_amount, F.ee_cash_value_amount, F.ytd_contributions, F.retirement_account_id, F.er_cash_value_amount, F.total_units, F.share_price from ( select coalesce(m.participant_id, '-9999') as participant_id, coalesce(m.fund_number, '-9999') as fund_number, coalesce(m.fund_iv, '-9999') as fund_iv, coalesce(m.plan_number, '-9999') as plan_number, m.retirement_account_id as retirement_account_id, coalesce(m.source_cycle_date, current_date() -1) as source_cycle_date, cast(cash_value_amount as DECIMAL(17, 2)) as cash_value_amount, cast(ee_cash_value_amount as DECIMAL(17, 2)) as ee_cash_value_amount, cast(ytd_contributions as DECIMAL(17, 2)) as ytd_contributions, cast(er_cash_value_amount as DECIMAL(17, 2)) as er_cash_value_amount, case when m.fund_number = '-9999' or m.fund_number is null or m.fund_number = '' then 0 else cast(m.share_price [0] as decimal (17, 6)) end as share_price, cast(total_units as DECIMAL(17, 4)) as total_units from ( SELECT T1.participant_id, T1.fund_number, T1.fund_iv, T1.plan_number, T1.retirement_account_id, T1.source_cycle_date, sum(coalesce(T1.cash_value_amount, 0.00)) as cash_value_amount, sum(coalesce(T1.ee_cash_value, 0.00)) as ee_cash_value_amount, sum(coalesce(T1.er_cash_value, 0.00)) as er_cash_value_amount, sum(coalesce(T1.total_shares, 0.00)) as total_units, collect_set(T1.share_price) as share_price, sum(coalesce(T1.ytd_contributions, 0.00)) as ytd_contributions from ( SELECT pc.participant_id, pc.fund_number, pc.retirement_account_id, pc.plan_number, pc.fund_iv, pc.source_cycle_date, pc.cash_value_amount, pc.share_price, case when pc.money_type_description = null then 0 when pc.money_type_description = 'EE' then cash_value_amount end as ee_cash_value, case when pc.money_type_description = null then 0 when pc.money_type_description = 'ER' then cash_value_amount end as er_cash_value, case when pc.total_shares = null then 0 else pc.total_shares END as total_shares, case when pc.ytd_contributions = null then 0 else pc.ytd_contributions END as ytd_contributions from participant_core_balance pc ) T1 GROUP BY T1.participant_id, T1.fund_number, T1.plan_number, T1.source_cycle_date, T1.fund_iv, T1.retirement_account_id ) as m ) as F left outer join( select fund_number, fund_iv, plan_number, count(1) from plan_fund group by fund_number, fund_iv, plan_number ) as pf on coalesce(F.fund_iv, '-9999') = coalesce(pf.fund_iv, '-9999') and coalesce(F.plan_number, '-9999') = coalesce(pf.plan_number, '-9999') ) A")

    return consumption_df
