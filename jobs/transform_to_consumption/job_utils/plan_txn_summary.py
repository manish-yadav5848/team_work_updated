
from pyspark.sql import SparkSession
from pyspark.sql.functions import *


def transform(spark: SparkSession, batch_date: str, primary_key: list):

    consumption_df = spark.sql("SELECT coalesce(T2.plan_number,'-9999') as plan_number,coalesce(T2.client_id,'-9999') as client_id,coalesce(T2.base_transaction_code,'-9999') as base_transaction_code,coalesce(T2.run_date,current_date()-1) as run_date,coalesce(T2.trade_date,current_date()-1) as trade_date,coalesce(T2.activity_type,'-9999') as activity_type,coalesce(T2.rev_code,'-9999') as rev_code,coalesce(T2.total_share_price,0.00) as total_share_price,coalesce(T2.total_transactions,0.00) as total_transactions,coalesce(T2.total_unique_participants,0.00) as total_unique_participants,coalesce(T2.total_cash_amount,0.00) as total_cash_amount,coalesce(T2.total_unit_shares,0.00) as total_unit_shares from (SELECT pl.plan_number,pl.client_id,T1.base_transaction_code,T1.run_date,T1.trade_date,T1.activity_type,T1.rev_code,cast(T1.total_share_price as DECIMAL(20,2)) as total_share_price,cast(T1.total_transactions as DECIMAL(20,2)) as total_transactions,cast(T1.total_unique_participants as DECIMAL(20,2)) as total_unique_participants,cast(T1.total_cash_amount as DECIMAL(20,2)) as total_cash_amount,cast(T1.total_unit_shares as DECIMAL(20,2)) as total_unit_shares from plan pl left outer join (SELECT plan_number,base_transaction_code,run_date,trade_date,activity_type,rev_code,sum(share_price) as total_share_price,sum(sequence_number) as total_transactions,count(distinct(participant_id)) as total_unique_participants,sum(cash) as total_cash_amount,sum(shares) as total_unit_shares from (SELECT plan_number,base_transaction_code,run_date,trade_date,activity_type,rev_code,coalesce(share_price,0) as share_price,coalesce(sequence_number,0) as sequence_number,coalesce(participant_id,0) as participant_id,coalesce(cash,0) as cash,coalesce(shares,0) as shares from txn) group by plan_number,base_transaction_code,run_date,trade_date,activity_type,rev_code) T1 on coalesce(pl.plan_number,'-9999')=coalesce(T1.plan_number,'-9999')) T2 left outer join    calendar_helper as ch   on coalesce(t2.run_date,current_date()-1) = coalesce(ch.mo_last_business_day,current_date()-1)   where mo_last_business_day is null")

    return consumption_df