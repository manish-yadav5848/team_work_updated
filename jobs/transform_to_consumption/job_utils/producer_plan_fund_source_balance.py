
from pyspark.sql import SparkSession
from pyspark.sql.functions import *


def transform(spark: SparkSession, batch_date: str, primary_key: list):

    consumption_df = spark.sql("SELECT coalesce(nullif(M.rep_tax_id_ssn, ''), '-9999') AS rep_tax_id_ssn, coalesce(nullif(M.plan_number, ''), '-9999') AS plan_number, coalesce(nullif(M.fund_number, ''), '-9999') AS fund_number, coalesce(nullif(M.money_source, ''), '-9999') AS money_source, M.producer_role_code, M.producer_role_type, coalesce(M.source_cycle_date, current_date() -1) AS source_cycle_date, cast(M.cash_value_amount AS Decimal(17, 2)) AS cash_value_amount, cast(M.ytd_contributions AS Decimal(17, 2)) AS ytd_contributions, cast(M.total_units AS Decimal(17, 4)) AS total_units, case when M.fund_number = '-9999' then cast(null as decimal(17, 6)) else cast(M.unit_price [0] AS DECIMAL(17, 6)) end AS unit_price FROM ( ( SELECT P.rep_tax_id_ssn, P.plan_number, B.fund_number, B.Money_source, P.producer_role_code, P.producer_role_type, coalesce(B.source_cycle_date, current_date() -1) AS source_cycle_date, B.cash_value_amount, B.ytd_contributions, B.total_units, B.unit_price FROM ( SELECT rep_tax_id_ssn, concat_ws ( ';', collect_set (distinct (nullif(producer_role_code_desc, ''))) ) AS producer_role_code, concat_ws ( ';', collect_set ( distinct ( nullif( case WHEN producer_role_type = 'RIA/IAR' THEN producer_role_type ELSE substring(producer_role_type, 0, 3) end, '' ) ) ) ) AS producer_role_type, plan_number FROM producer WHERE AGREEMENT_LEVEL_CODE = 'PLAN' GROUP BY rep_tax_id_ssn, plan_number ) P INNER JOIN ( SELECT coalesce(t1.plan_number, '-9999') AS plan_number, coalesce(t1.fund_number, '-9999') AS fund_number, coalesce(t1.money_source, '-9999') AS money_source, coalesce(t1.source_cycle_date, current_date() -1) AS source_cycle_date, sum(coalesce(cash_value, 0)) AS cash_value_amount, sum(coalesce(ytd_contributions, 0)) AS ytd_contributions, sum(coalesce(number_of_units, 0)) AS total_units, collect_set(Unit_price) AS Unit_price FROM ( SELECT pc.plan_number, pc.source_cycle_date, pc.money_source, trim(pc.fund_number) AS fund_number, coalesce(pc.cash_value_amount, 0) AS cash_value, coalesce(pc.total_shares, 0) AS number_of_units, coalesce(pc.ytd_contributions, 0) AS ytd_contributions, pc.share_price AS Unit_price FROM participant_core_balance pc ) AS T1 GROUP BY plan_number, source_cycle_date, fund_number, money_source ) B ON coalesce(B.plan_number, '-9999') = coalesce(P.plan_number, '-9999') ) UNION ( SELECT m1.rep_tax_id_ssn, m1.plan_number, m1.fund_number, m1.money_source, concat_ws ( ';', array_distinct ( flatten (collect_set (distinct (producer_role_code))) ) ) AS producer_role_code, concat_ws ( ';', array_distinct ( flatten (collect_set (distinct (producer_role_type))) ) ) AS producer_role_type, coalesce(m1.source_cycle_date, current_date() -1) AS source_cycle_date, sum(coalesce(m1.cash_value, 0)) AS cash_value_amount, sum(coalesce(m1.ytd_contributions, 0)) AS ytd_contributions, sum(coalesce(m1.number_of_units, 0)) AS total_units, collect_set(m1.unit_price) AS unit_price FROM ( SELECT pr.rep_tax_id_ssn, pr.producer_role_code, pr.producer_role_type, pc.participant_id, pr.retirement_account_id, pr.plan_number, pc.money_source, trim(pc.fund_number) AS fund_number, pc.source_cycle_date, coalesce(pc.cash_value_amount, 0) AS cash_value, coalesce(pc.ytd_contributions, 0.00) AS ytd_contributions, pc.number_of_units, pc.unit_price [0] as unit_price FROM ( SELECT rep_tax_id_ssn, participant_id, retirement_account_id, collect_set (distinct (nullif(producer_role_code_desc, ''))) AS producer_role_code, collect_set ( distinct ( nullif( case WHEN producer_role_type = 'RIA/IAR' THEN producer_role_type ELSE substring(producer_role_type, 0, 3) end, '' ) ) ) AS producer_role_type, plan_number FROM producer WHERE AGREEMENT_LEVEL_CODE = 'MSRC' OR AGREEMENT_LEVEL_CODE = 'PART' GROUP BY rep_tax_id_ssn, participant_id, plan_number, retirement_account_id ) pr INNER JOIN ( SELECT participant_id, plan_number, source_cycle_date, retirement_account_id, fund_number, money_source, sum(cash_value_amount) AS cash_value_amount, sum(total_shares) AS number_of_units, collect_set(share_price) AS unit_price, sum(ytd_contributions) AS ytd_contributions FROM ( SELECT source_cycle_date, participant_id, retirement_account_id, plan_number, fund_number, money_source, total_shares, ytd_contributions, cash_value_amount as cash_value_amount, share_price FROM participant_core_balance ) GROUP BY participant_id, plan_number, fund_number, money_source, retirement_account_id, source_cycle_date ) pc ON coalesce(pc.plan_number, '-9999') = coalesce(pr.plan_number, '-9999') and coalesce(pc.retirement_account_id, '-9999') = coalesce(pr.retirement_account_id, '-9999') AND coalesce(substring(pc.participant_id, 1, 13), '-9999') = coalesce(substring(pr.participant_id, 1, 13), '-9999') ) m1 GROUP BY m1.rep_tax_id_ssn, m1.plan_number, m1.fund_number, m1.money_source, source_cycle_date ) ) AS M")

    return consumption_df
