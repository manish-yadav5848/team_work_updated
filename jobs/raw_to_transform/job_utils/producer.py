
from pyspark.sql import SparkSession
from pyspark.sql.functions import *


def transform(spark: SparkSession, primary_key: list):

    nw00paap_nldss_prdps_ps50_prdcrext_lx_seq_df = spark.sql("SELECT ws_participant_key as producer_participant_key, case WHEN NULLIF(TRIM(prx_participant_money_source), '') IS  not NULL THEN CONCAT(prx_participant_acct_number,prx_participant_money_source ) else CONCAT(prx_plan_id,'~',prx_participant_acct_number ) end  as retirement_account_id,coalesce(ws_role_key,'-9999') as producer_role_key,prx_producer_first_name as first_name,prx_producer_last_name as last_name,ws_full_name_field as full_name,prx_producer_middle_init as middle_name,ws_pais_entity_key as pais_entity_key,prx_producer_tax_id as rep_tax_id_ssn,'DSS_14' as source_system,prx_producer_suffi as suffix,prx_agency_agent_code as agency_agent_code,prx_participant_acct_number as participant_id,prx_participant_level_code as AGREEMENT_LEVEL_CODE,prx_participant_money_source as money_source,ws_plan_key as producer_plan_key,prx_plan_id as plan_number,prx_producer_role_code as producer_role_code,rh.source_system_field_value_txt as producer_role_code_desc,prx_producer_role_end_date as producer_role_end_date,prx_producer_role_source as producer_role_source,prx_producer_role_start_date as producer_role_start_date,prx_producer_role_type as producer_role_type,ws_role_split_percent as role_split_percent,rx_action_code as type_of_record,prx_cycle_date as source_cycle_date,prx_producer_source as producer_source_system FROM nw00paap_nldss_prdps_ps50_prdcrext_lx_seq pr left outer join (select source_system_field_value,source_system_field_value_txt from pdab_role_code_helper_csv group by source_system_field_value,source_system_field_value_txt ) rh on  coalesce(pr.prx_producer_role_code,'-9999')=coalesce(rh.source_system_field_value,'-9999') where pr.prx_plan_id<>'UNKNOWN'")

    dss_dc_producer_role_daily_dat_df = spark.sql("SELECT participant_key  as producer_participant_key, case when NULLIF(TRIM(participant_money_source), '') IS  not NULL THEN CONCAT(participant_acct_number,participant_money_source ) else CONCAT(plan_id,'~',participant_acct_number ) end  as retirement_account_id,role_key as producer_role_key,agent_first_name as first_name,agent_last_name as last_name,full_agent_name as full_name,agent_mid_init as middle_name,agent_entity_key as pais_entity_key,agent_tax_id as rep_tax_id_ssn,'DSS' as source_system,agent_suffix as suffix,agent_and_agency_code_combined as agency_agent_code,participant_acct_number as participant_id,participant_level_code as AGREEMENT_LEVEL_CODE,participant_money_source as money_source,plan_key_combo as producer_plan_key,plan_id as plan_number,agent_role as producer_role_code,rh.source_system_field_value_txt as producer_role_code_desc,agent_role_end_date as producer_role_end_date,producer_role_source,agent_role_start_date as producer_role_start_date,producer_role_type,agent_split_percent as role_split_percent,type_of_record,dss_cycle_date as source_cycle_date,cast(null as VARCHAR(10)) as producer_source_system FROM dss_dc_producerrole_daily_dat  pr left outer join (select source_system_field_value,source_system_field_value_txt from pdab_role_code_helper_csv group by source_system_field_value,source_system_field_value_txt ) rh on  coalesce(pr.agent_role,'-9999')=coalesce(rh.source_system_field_value,'-9999') where pr.plan_id<>'UNKNOWN'")

    transform_df = nw00paap_nldss_prdps_ps50_prdcrext_lx_seq_df.unionByName(dss_dc_producer_role_daily_dat_df)

    return transform_df